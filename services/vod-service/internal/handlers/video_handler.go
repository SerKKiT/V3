package handlers

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"
	"strconv"
	"time"

	"github.com/SerKKiT/streaming-platform/vod-service/internal/models"
	"github.com/SerKKiT/streaming-platform/vod-service/internal/repository"
	"github.com/SerKKiT/streaming-platform/vod-service/internal/storage"
	"github.com/gin-gonic/gin"
	"github.com/google/uuid"
)

type VideoHandler struct {
	repo                *repository.VideoRepository
	storage             *storage.MinIOStorage
	recordingServiceURL string
	recordingBucket     string
	vodBucket           string
}

func NewVideoHandler(
	repo *repository.VideoRepository,
	storage *storage.MinIOStorage,
	recordingServiceURL string,
	recordingBucket string,
	vodBucket string,
) *VideoHandler {
	return &VideoHandler{
		repo:                repo,
		storage:             storage,
		recordingServiceURL: recordingServiceURL,
		recordingBucket:     recordingBucket,
		vodBucket:           vodBucket,
	}
}

// getUserID –∏–∑–≤–ª–µ–∫–∞–µ—Ç user_id –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏–ª–∏ JWT —Ç–æ–∫–µ–Ω–∞
// getUserID –∏–∑–≤–ª–µ–∫–∞–µ—Ç user_id –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞
func getUserID(c *gin.Context) string {
	// 1. –ò–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω middleware)
	if userID, exists := c.Get("user_id"); exists {
		if uid, ok := userID.(string); ok && uid != "" {
			return uid
		}
	}

	// 2. –ò–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ X-User-ID (–æ—Ç API Gateway)
	if userID := c.GetHeader("X-User-ID"); userID != "" {
		return userID
	}

	// –ù–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
	return ""
}

// ImportRecording –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –∑–∞–ø–∏—Å—å –∏–∑ Recording Service
func (h *VideoHandler) ImportRecording(c *gin.Context) {
	userID := getUserID(c)
	if userID == "" {
		log.Println("‚ùå ImportRecording: missing user_id")
		c.JSON(http.StatusUnauthorized, gin.H{"error": "Unauthorized"})
		return
	}

	var req models.ImportRecordingRequest
	if err := c.ShouldBindJSON(&req); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Invalid request"})
		return
	}

	recordingID, err := uuid.Parse(req.RecordingID)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Invalid recording ID"})
		return
	}

	userUUID, err := uuid.Parse(userID)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Invalid user ID"})
		return
	}

	log.Printf("üì• Importing recording %s for user %s", recordingID, userID)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
	existingVideo, _ := h.repo.GetByRecordingID(recordingID)
	if existingVideo != nil {
		log.Printf("‚ö†Ô∏è Recording %s already imported as video %s", recordingID, existingVideo.ID)
		c.JSON(http.StatusOK, gin.H{
			"video_id": existingVideo.ID,
			"message":  "Recording already imported",
		})
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ recording
	recording, err := h.getRecordingInfo(recordingID)
	if err != nil {
		log.Printf("‚ùå Failed to get recording info: %v", err)
		c.JSON(http.StatusNotFound, gin.H{"error": "Recording not found"})
		return
	}

	log.Printf("üîç Recording info: FilePath=%s, ThumbnailPath=%s", recording.FilePath, recording.ThumbnailPath)

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –¥–ª—è –≤–∏–¥–µ–æ
	videoID := uuid.New()
	videoFileName := fmt.Sprintf("%s.mp4", videoID.String())

	// –ö–æ–ø–∏—Ä—É–µ–º –≤–∏–¥–µ–æ –∏–∑ recordings –≤ vod-videos bucket
	ctx := context.Background()
	if err := h.storage.CopyFromRecordings(ctx, h.recordingBucket, recording.FilePath, videoFileName); err != nil {
		log.Printf("‚ùå Failed to copy video: %v", err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to copy recording"})
		return
	}

	log.Printf("‚úÖ Video copied: %s -> %s", recording.FilePath, videoFileName)

	// –ö–æ–ø–∏—Ä—É–µ–º thumbnail –µ—Å–ª–∏ –µ—Å—Ç—å
	var thumbnailFileName string
	if recording.ThumbnailPath != "" && recording.ThumbnailPath != "null" {
		thumbnailFileName = fmt.Sprintf("%s.jpg", videoID.String())
		log.Printf("üìã Copying thumbnail from recordings/%s to vod-videos/%s", recording.ThumbnailPath, thumbnailFileName)

		if err := h.storage.CopyFromRecordings(ctx, h.recordingBucket, recording.ThumbnailPath, thumbnailFileName); err != nil {
			log.Printf("‚ö†Ô∏è Failed to copy thumbnail (non-critical): %v", err)
			thumbnailFileName = ""
		} else {
			log.Printf("‚úÖ Thumbnail copied: %s -> %s", recording.ThumbnailPath, thumbnailFileName)
		}
	} else {
		log.Printf("‚ÑπÔ∏è No thumbnail available for recording %s", recordingID)
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º visibility
	visibility := req.Visibility
	if visibility == "" {
		visibility = "public" // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é public
	}

	// –°–æ–∑–¥–∞—ë–º video
	video := &models.Video{
		ID:            videoID,
		UserID:        userUUID,
		RecordingID:   &recordingID,
		StreamID:      recording.StreamID,
		Title:         req.Title,
		Description:   req.Description,
		Category:      req.Category,
		Tags:          req.Tags,
		Source:        "recording",
		Status:        "ready",
		Visibility:    visibility,
		FilePath:      videoFileName,
		ThumbnailPath: thumbnailFileName,
		Duration:      recording.Duration,
		FileSize:      recording.FileSize,
		ViewCount:     0,
		LikeCount:     0,
		CreatedAt:     recording.StartedAt,
		UpdatedAt:     time.Now(),
	}

	if err := h.repo.Create(video); err != nil {
		log.Printf("‚ùå Failed to create video: %v", err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to import recording"})
		return
	}

	log.Printf("‚úÖ Recording imported as video: %s -> %s", recordingID, video.ID)
	log.Printf("üìÅ File location: vod-videos/%s", videoFileName)
	if thumbnailFileName != "" {
		log.Printf("üñºÔ∏è Thumbnail location: vod-videos/%s", thumbnailFileName)
	}

	c.JSON(http.StatusCreated, gin.H{
		"video_id": video.ID,
		"message":  "Recording imported successfully",
	})
}

// GetUserVideos –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (h *VideoHandler) GetUserVideos(c *gin.Context) {
	userID := getUserID(c)

	if userID == "" {
		log.Println("‚ùå GetUserVideos: missing user_id")
		c.JSON(http.StatusUnauthorized, gin.H{"error": "Unauthorized"})
		return
	}

	log.Printf("üìπ Received request for user videos: X-User-ID=%s", userID)

	userUUID, err := uuid.Parse(userID)
	if err != nil {
		log.Printf("‚ùå Invalid user ID format: %s, error: %v", userID, err)
		c.JSON(http.StatusBadRequest, gin.H{"error": "Invalid user ID"})
		return
	}

	limit, _ := strconv.Atoi(c.DefaultQuery("limit", "20"))
	offset, _ := strconv.Atoi(c.DefaultQuery("offset", "0"))

	if limit > 100 {
		limit = 100
	}

	log.Printf("üìπ Getting videos for user: %s (limit=%d, offset=%d)", userID, limit, offset)

	videos, total, err := h.repo.ListUserVideos(userUUID, limit, offset)
	if err != nil {
		log.Printf("‚ùå Failed to get user videos: %v", err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to fetch videos"})
		return
	}

	page := offset/limit + 1

	log.Printf("‚úÖ Found %d videos for user %s", total, userID)

	c.JSON(http.StatusOK, models.VideoListResponse{
		Videos: videos,
		Total:  total,
		Page:   page,
		Limit:  limit,
	})
}

// GetVideo –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–¥–Ω–æ –≤–∏–¥–µ–æ –ø–æ ID
// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ —Å —É—á–µ—Ç–æ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è JWT
func (h *VideoHandler) GetVideo(c *gin.Context) {
	videoID, err := uuid.Parse(c.Param("id"))
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Invalid video ID"})
		return
	}

	video, err := h.repo.GetByID(videoID)
	if err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "Video not found"})
		return
	}

	// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É –≤–∏–¥–µ–æ
	if video.Visibility == "private" {
		// –ü–æ–ª—É—á–∞–µ–º user_id (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö)
		userID := getUserID(c)

		// –ï—Å–ª–∏ –Ω–µ—Ç JWT –∏–ª–∏ —ç—Ç–æ –Ω–µ –≤–ª–∞–¥–µ–ª–µ—Ü - –∑–∞–ø—Ä–µ—Ç–∏—Ç—å
		if userID == "" || userID != video.UserID.String() {
			log.Printf("‚õî Access denied to private video %s: requester=%s, owner=%s",
				videoID, userID, video.UserID.String())
			c.JSON(http.StatusForbidden, gin.H{
				"error":   "This video is private",
				"message": "Only the owner can view this video",
			})
			return
		}

		log.Printf("‚úÖ Owner access granted to private video %s", videoID)
	}

	log.Printf("‚úÖ Returning video %s (visibility=%s)", videoID, video.Visibility)
	c.JSON(http.StatusOK, gin.H{"video": video})
}

// UpdateVideo –æ–±–Ω–æ–≤–ª—è–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤–∏–¥–µ–æ
func (h *VideoHandler) UpdateVideo(c *gin.Context) {
	userID := getUserID(c)
	if userID == "" {
		c.JSON(http.StatusUnauthorized, gin.H{"error": "Unauthorized"})
		return
	}

	videoID, err := uuid.Parse(c.Param("id"))
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Invalid video ID"})
		return
	}

	video, err := h.repo.GetByID(videoID)
	if err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "Video not found"})
		return
	}

	if video.UserID.String() != userID {
		c.JSON(http.StatusForbidden, gin.H{"error": "Not authorized"})
		return
	}

	var req models.UpdateVideoRequest
	if err := c.ShouldBindJSON(&req); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Invalid request"})
		return
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è
	if req.Title != "" {
		video.Title = req.Title
	}
	if req.Description != "" {
		video.Description = req.Description
	}
	if req.Category != "" {
		video.Category = req.Category
	}
	if len(req.Tags) > 0 {
		video.Tags = req.Tags
	}
	if req.Visibility != "" {
		video.Visibility = req.Visibility
	}

	if err := h.repo.Update(video); err != nil {
		log.Printf("‚ùå Failed to update video: %v", err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to update video"})
		return
	}

	c.JSON(http.StatusOK, gin.H{"message": "Video updated successfully"})
}

// DeleteVideo —É–¥–∞–ª—è–µ—Ç –≤–∏–¥–µ–æ
func (h *VideoHandler) DeleteVideo(c *gin.Context) {
	userID := getUserID(c)
	if userID == "" {
		c.JSON(http.StatusUnauthorized, gin.H{"error": "Unauthorized"})
		return
	}

	videoID, err := uuid.Parse(c.Param("id"))
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Invalid video ID"})
		return
	}

	video, err := h.repo.GetByID(videoID)
	if err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "Video not found"})
		return
	}

	if video.UserID.String() != userID {
		c.JSON(http.StatusForbidden, gin.H{"error": "Not authorized"})
		return
	}

	// –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –∏–∑ MinIO
	ctx := context.Background()
	if err := h.storage.DeleteObject(ctx, video.FilePath); err != nil {
		log.Printf("‚ö†Ô∏è Failed to delete file from MinIO: %v", err)
	}

	// –£–¥–∞–ª—è–µ–º thumbnail
	if video.ThumbnailPath != "" {
		if err := h.storage.DeleteObject(ctx, video.ThumbnailPath); err != nil {
			log.Printf("‚ö†Ô∏è Failed to delete thumbnail from MinIO: %v", err)
		}
	}

	// –£–¥–∞–ª—è–µ–º –∏–∑ –ë–î
	if err := h.repo.Delete(videoID); err != nil {
		log.Printf("‚ùå Failed to delete video: %v", err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to delete video"})
		return
	}

	c.JSON(http.StatusOK, gin.H{"message": "Video deleted successfully"})
}

// IncrementView —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á—ë—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
func (h *VideoHandler) IncrementView(c *gin.Context) {
	videoID, err := uuid.Parse(c.Param("id"))
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Invalid video ID"})
		return
	}

	if err := h.repo.IncrementViewCount(videoID); err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to increment view count"})
		return
	}

	c.JSON(http.StatusOK, gin.H{"message": "View count incremented"})
}

// LikeVideo —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á—ë—Ç—á–∏–∫ –ª–∞–π–∫–æ–≤
func (h *VideoHandler) LikeVideo(c *gin.Context) {
	videoID, err := uuid.Parse(c.Param("id"))
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Invalid video ID"})
		return
	}

	if err := h.repo.IncrementLikeCount(videoID); err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to like video"})
		return
	}

	c.JSON(http.StatusOK, gin.H{"message": "Video liked"})
}

// GetStreamURL –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —á–µ—Ä–µ–∑ API
func (h *VideoHandler) GetStreamURL(c *gin.Context) {
	videoID, err := uuid.Parse(c.Param("id"))
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Invalid video ID"})
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –≤–∏–¥–µ–æ –∏–∑ –ë–î
	video, err := h.repo.GetByID(videoID)
	if err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "Video not found"})
		return
	}

	// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
	if video.Visibility == "private" {
		userID := getUserID(c)
		if userID == "" || userID != video.UserID.String() {
			c.JSON(http.StatusForbidden, gin.H{"error": "Access denied"})
			return
		}
	}

	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º URL —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
	videoURL := fmt.Sprintf("http://localhost/api/videos/%s/play", video.ID.String())
	thumbnailURL := ""
	if video.ThumbnailPath != "" {
		thumbnailURL = fmt.Sprintf("http://localhost/api/videos/%s/thumbnail", video.ID.String())
	}

	c.JSON(http.StatusOK, gin.H{
		"video_url":     videoURL,
		"thumbnail_url": thumbnailURL,
		"video": gin.H{
			"id":          video.ID,
			"title":       video.Title,
			"description": video.Description,
			"duration":    video.Duration,
			"view_count":  video.ViewCount,
			"like_count":  video.LikeCount,
			"created_at":  video.CreatedAt,
			"visibility":  video.Visibility,
			"tags":        video.Tags,
			"category":    video.Category,
		},
	})
}

// StreamVideoFile streams video file directly with auth check
func (h *VideoHandler) StreamVideoFile(c *gin.Context) {
	videoID, err := uuid.Parse(c.Param("id"))
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Invalid video ID"})
		return
	}

	video, err := h.repo.GetByID(videoID)
	if err != nil {
		log.Printf("‚ùå Video not found: %v", err)
		c.JSON(http.StatusNotFound, gin.H{"error": "Video not found"})
		return
	}

	// Check access for private videos
	if video.Visibility == "private" {
		userIDInterface, exists := c.Get("user_id")
		if !exists {
			log.Printf("‚õî No auth provided for private video %s", videoID)
			c.JSON(http.StatusForbidden, gin.H{"error": "Access denied"})
			return
		}

		userID := userIDInterface.(string)
		if userID != video.UserID.String() {
			log.Printf("‚õî User %s tried to access private video of %s", userID, video.UserID)
			c.JSON(http.StatusForbidden, gin.H{"error": "Access denied"})
			return
		}

		log.Printf("‚úÖ Access granted to owner %s for private video %s", userID, videoID)
	}

	// ‚úÖ Stream file directly from MinIO
	ctx := c.Request.Context()
	object, err := h.storage.GetObject(ctx, h.vodBucket, video.FilePath) // ‚úÖ –ü–µ—Ä–µ–¥–∞–µ–º bucket
	if err != nil {
		log.Printf("‚ùå Failed to get object from MinIO: %v", err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to stream video"})
		return
	}
	defer object.Close()

	// Get file info
	stat, err := object.Stat()
	if err != nil {
		log.Printf("‚ùå Failed to stat object: %v", err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to get video info"})
		return
	}

	log.Printf("‚úÖ Streaming video %s directly (size: %d bytes)", videoID, stat.Size)

	// Set headers for video streaming
	c.Header("Content-Type", "video/mp4")
	c.Header("Content-Length", fmt.Sprintf("%d", stat.Size))
	c.Header("Accept-Ranges", "bytes")
	c.Header("Cache-Control", "public, max-age=31536000")

	// CORS for video element
	c.Header("Access-Control-Allow-Origin", "*")
	c.Header("Access-Control-Allow-Credentials", "true")

	// Stream to client
	_, err = io.Copy(c.Writer, object)
	if err != nil {
		log.Printf("‚ö†Ô∏è Error streaming video: %v", err)
	}
}

// StreamThumbnail streams thumbnail file directly with auth check
func (h *VideoHandler) StreamThumbnail(c *gin.Context) {
	videoID, err := uuid.Parse(c.Param("id"))
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Invalid video ID"})
		return
	}

	video, err := h.repo.GetByID(videoID)
	if err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "Video not found"})
		return
	}

	if video.ThumbnailPath == "" {
		c.JSON(http.StatusNotFound, gin.H{"error": "Thumbnail not found"})
		return
	}

	// Check access for private videos
	if video.Visibility == "private" {
		userIDInterface, exists := c.Get("user_id")
		if !exists {
			log.Printf("‚õî No auth provided for private video thumbnail %s", videoID)
			c.JSON(http.StatusForbidden, gin.H{"error": "Access denied"})
			return
		}

		userID := userIDInterface.(string)
		if userID != video.UserID.String() {
			log.Printf("‚õî User %s tried to access private video thumbnail of %s", userID, video.UserID)
			c.JSON(http.StatusForbidden, gin.H{"error": "Access denied"})
			return
		}

		log.Printf("‚úÖ Access granted to owner %s for private video thumbnail %s", userID, videoID)
	}

	// ‚úÖ Stream thumbnail directly from MinIO
	ctx := c.Request.Context()
	object, err := h.storage.GetObject(ctx, h.vodBucket, video.ThumbnailPath)
	if err != nil {
		log.Printf("‚ùå Failed to get thumbnail from MinIO: %v", err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to stream thumbnail"})
		return
	}
	defer object.Close()

	// Get file info
	stat, err := object.Stat()
	if err != nil {
		log.Printf("‚ùå Failed to stat thumbnail: %v", err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to get thumbnail info"})
		return
	}

	log.Printf("‚úÖ Streaming thumbnail for video %s (size: %d bytes)", videoID, stat.Size)

	// Set headers for image streaming
	c.Header("Content-Type", "image/jpeg")
	c.Header("Content-Length", fmt.Sprintf("%d", stat.Size))
	c.Header("Cache-Control", "public, max-age=31536000")

	// CORS for image element
	c.Header("Access-Control-Allow-Origin", "*")
	c.Header("Access-Control-Allow-Credentials", "true")

	// Stream to client
	_, err = io.Copy(c.Writer, object)
	if err != nil {
		log.Printf("‚ö†Ô∏è Error streaming thumbnail: %v", err)
	}
}

// getRecordingInfo –ø–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ recording
func (h *VideoHandler) getRecordingInfo(recordingID uuid.UUID) (*RecordingInfo, error) {
	url := fmt.Sprintf("%s/recording/%s", h.recordingServiceURL, recordingID)
	resp, err := http.Get(url)
	if err != nil {
		return nil, fmt.Errorf("failed to contact recording service: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("recording service returned status %d", resp.StatusCode)
	}

	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return nil, fmt.Errorf("failed to read response: %w", err)
	}

	var result struct {
		Recording *RecordingInfo `json:"recording"`
	}

	if err := json.Unmarshal(body, &result); err != nil {
		return nil, fmt.Errorf("failed to parse response: %w", err)
	}

	return result.Recording, nil
}

// RecordingInfo - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø–∏—Å–∏ –∏–∑ Recording Service
type RecordingInfo struct {
	ID            uuid.UUID  `json:"id"`
	StreamID      *uuid.UUID `json:"stream_id"`
	FilePath      string     `json:"file_path"`
	ThumbnailPath string     `json:"thumbnail_path"`
	Duration      int        `json:"duration"`
	FileSize      int64      `json:"file_size"`
	StartedAt     time.Time  `json:"started_at"`
}

// HealthCheck - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞
func HealthCheck(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{
		"status":  "healthy",
		"service": "vod-service",
	})
}

// ListAllVideos –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –ø—É–±–ª–∏—á–Ω—ã–µ –≤–∏–¥–µ–æ + –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (h *VideoHandler) ListAllVideos(c *gin.Context) {
	limit, _ := strconv.Atoi(c.DefaultQuery("limit", "20"))
	offset, _ := strconv.Atoi(c.DefaultQuery("offset", "0"))

	if limit > 100 {
		limit = 100
	}

	// –ü–æ–ª—É—á–∞–µ–º user_id (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö)
	userID := getUserID(c)

	var userUUID *uuid.UUID
	if userID != "" {
		parsed, err := uuid.Parse(userID)
		if err == nil {
			userUUID = &parsed
		}
	}

	log.Printf("üìπ Getting all videos (limit=%d, offset=%d, user_id=%v)", limit, offset, userID)

	videos, total, err := h.repo.ListAllVideos(userUUID, limit, offset)
	if err != nil {
		log.Printf("‚ùå Failed to get videos: %v", err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to fetch videos"})
		return
	}

	page := offset/limit + 1

	log.Printf("‚úÖ Found %d videos (public + user's private)", total)

	c.JSON(http.StatusOK, models.VideoListResponse{
		Videos: videos,
		Total:  total,
		Page:   page,
		Limit:  limit,
	})
}
