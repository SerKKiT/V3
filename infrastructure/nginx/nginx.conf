worker_processes auto;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    log_format debug '$remote_addr - $remote_user [$time_local] "$request" '
                     '$status $body_bytes_sent "$http_referer" '
                     '"$http_user_agent" upstream: $upstream_addr status: $upstream_status';

    access_log /var/log/nginx/access.log debug;
    error_log /var/log/nginx/error.log warn;

    upstream api_gateway {
        server api-gateway:8080;
    }

    upstream minio_backend {
        server minio:9000;
    }

    # ✅ Вынесли CORS headers в map для переиспользования
    map $request_method $cors_method {
        OPTIONS 1;
        default 0;
    }

    server {
        listen 80;
        server_name localhost;

        # ✅ ИСПРАВЛЕНО: Live Streams (HLS) - CORS БЕЗ IF
        location /live-streams/ {
            # Всегда добавляем CORS headers
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, HEAD, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Range, Content-Type, Accept, Origin, User-Agent' always;
            add_header 'Access-Control-Expose-Headers' 'Content-Length, Content-Range, Accept-Ranges' always;
            add_header 'Access-Control-Max-Age' '86400' always;
            
            # HLS specific
            add_header 'Cache-Control' 'no-cache, no-store, must-revalidate' always;
            
            # Если OPTIONS - сразу возвращаем 204
            if ($request_method = 'OPTIONS') {
                return 204;
            }
            
            # Проксируем на MinIO
            proxy_pass http://minio_backend;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host minio:9000;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_buffering off;
            
            # Таймауты
            proxy_connect_timeout 10s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
            
            # Прятать headers от MinIO
            proxy_hide_header 'Access-Control-Allow-Origin';
            proxy_hide_header 'Access-Control-Allow-Methods';
            proxy_hide_header 'Access-Control-Allow-Headers';
        }

        # ✅ Storage для VOD - такой же подход
        location /storage/ {
            # Всегда добавляем CORS headers
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, HEAD, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Range, Content-Type, Accept, Origin' always;
            add_header 'Access-Control-Expose-Headers' 'Content-Length, Content-Range, Accept-Ranges' always;
            add_header 'Accept-Ranges' 'bytes' always;
            
            # Если OPTIONS - сразу возвращаем 204
            if ($request_method = 'OPTIONS') {
                return 204;
            }
            
            # Убираем /storage/ и проксируем на MinIO
            rewrite ^/storage/(.*)$ /$1 break;
            
            proxy_pass http://minio_backend;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host minio:9000;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_buffering off;
            
            # Range requests
            proxy_set_header Range $http_range;
            proxy_set_header If-Range $http_if_range;
            
            # Таймауты
            proxy_connect_timeout 300s;
            proxy_send_timeout 300s;
            proxy_read_timeout 300s;
            
            # Прятать headers от MinIO
            proxy_hide_header 'Access-Control-Allow-Origin';
            proxy_hide_header 'Access-Control-Allow-Methods';
            proxy_hide_header 'Access-Control-Allow-Headers';
        }
        


        # API Gateway
        location /api {
            # Всегда добавляем CORS headers
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization, Accept, Origin' always;
            add_header 'Access-Control-Max-Age' '86400' always;
            
            # CORS preflight
            if ($request_method = 'OPTIONS') {
                return 204;
            }

            # Проксируем на API Gateway
            proxy_pass http://api_gateway;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Убираем CORS headers от backend
            proxy_hide_header 'Access-Control-Allow-Origin';
            proxy_hide_header 'Access-Control-Allow-Methods';
            proxy_hide_header 'Access-Control-Allow-Headers';
            proxy_hide_header 'Access-Control-Allow-Credentials';
            proxy_hide_header 'Access-Control-Max-Age';
            
            # ✅ Увеличенные таймауты для import-recording
            proxy_connect_timeout 600s;
            proxy_send_timeout 600s;
            proxy_read_timeout 600s;
            
            # Большой размер body НЕ нужен (копирование внутри MinIO)
            client_max_body_size 100M; # Только для metadata JSON
        }

        # Health
        location /health {
            access_log off;
            return 200 "nginx ok\n";
            add_header Content-Type text/plain;
        }

        # Root
        location / {
            return 200 "Streaming Platform\n";
            add_header Content-Type text/plain;
        }
    }
}
